package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"

	"products/graph/model"
)

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context) ([]*model.Product, error) {
	return products, nil
}

// Product is the resolver for the product field.
func (r *queryResolver) Product(ctx context.Context, id string) (*model.Product, error) {
	for _, p := range products {
		if p.ID == id {
			return p, nil
		}
	}
	return nil, nil
}

// __resolveReference is the resolver for the __resolveReference field.
func (r *Resolver) __resolveReference(ctx context.Context, obj interface{}) (interface{}, error) {
	// Extrair o ID da referÃªncia
	var id string
	switch v := obj.(type) {
	case map[string]interface{}:
		if idVal, ok := v["id"]; ok {
			if idStr, ok := idVal.(string); ok {
				id = idStr
			}
		}
	case *model.Product:
		id = v.ID
	}

	if id == "" {
		return nil, nil
	}

	// search for the product
	for _, product := range products {
		if product.ID == id {
			return product, nil
		}
	}

	return nil, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
